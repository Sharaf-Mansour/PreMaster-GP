<div class="col-lg-7 col-xl-8 d-flex justify-content-center align-items-center min-vh-lg-100">
    <div class="flex-grow-1 mx-auto" style="max-width: 28rem;">
        <div class="text-center mb-5 mb-md-7">
            <h1 class="h2">Forgot password?</h1>
            <p>Enter your email address below and we'll get you back on track.</p>
        </div>

        <EditForm EditContext="editContext">
            <FluentValidationValidator />
            <div class="mb-3">
                <div class="d-flex justify-content-between align-items-center">
                    <label class="form-label" for="signupModalFormResetPasswordEmail" tabindex="0">Your email</label>

                    <a class="form-label-link" href="/" @onclick='(e)=>OnClick(e,"Login")'>
                        <i class="bi-chevron-left small ms-1"></i> Back to Log in
                    </a>
                </div>

                <InputText @bind-Value="model.Email" class="form-control form-control-lg" name="email" id="signupModalFormResetPasswordEmail" tabindex="1" placeholder="Enter your email address" aria-label="Enter your email address" />

            </div>
            <ValidationMessage For="@(()=> model.Email)" />

            <div class="d-grid mb-3">
                <button type="submit" class="btn btn-primary btn-lg">Submit</button>
            </div>
        </EditForm>
    </div>
</div>





@code {
    public EditContext? editContext;

    protected override void OnInitialized()
    {
        editContext = new(model);
        editContext?.SetFieldCssClassProvider(new CustomFieldClassProvider());
         WFS.OnChange += StateHasChanged;
    }
    public AccountLogin model { get; set; } = new();
    [Parameter]
    public EventCallback<MouseEventArgs> OnClickCallback { get; set; }

    void OnClick(MouseEventArgs e, string page)
    {
        WFS.Page = page;
        OnClickCallback.InvokeAsync(e);
    }
    }

